// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// The dynamic tree structure. This should be considered private data.<br/>
	/// It is placed here for performance reasons.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2DynamicTree")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2DynamicTree
	{
		/// <summary>
		/// The tree nodes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "nodes")]
		[NativeName(NativeNameType.Type, "b2TreeNode *")]
		public unsafe B2TreeNode* Nodes;

		/// <summary>
		/// The root index<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "root")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int Root;

		/// <summary>
		/// The number of nodes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "nodeCount")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int NodeCount;

		/// <summary>
		/// The allocated node space<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "nodeCapacity")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int NodeCapacity;

		/// <summary>
		/// Node free list<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "freeList")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int FreeList;

		/// <summary>
		/// Number of proxies created<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "proxyCount")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int ProxyCount;

		/// <summary>
		/// Leaf indices for rebuild<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "leafIndices")]
		[NativeName(NativeNameType.Type, "int32_t *")]
		public unsafe int* LeafIndices;

		/// <summary>
		/// Leaf bounding boxes for rebuild<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "leafBoxes")]
		[NativeName(NativeNameType.Type, "b2AABB *")]
		public unsafe B2AABB* LeafBoxes;

		/// <summary>
		/// Leaf bounding box centers for rebuild<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "leafCenters")]
		[NativeName(NativeNameType.Type, "b2Vec2 *")]
		public unsafe Vector2* LeafCenters;

		/// <summary>
		/// Bins for sorting during rebuild<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "binIndices")]
		[NativeName(NativeNameType.Type, "int32_t *")]
		public unsafe int* BinIndices;

		/// <summary>
		/// Allocated space for rebuilding<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "rebuildCapacity")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int RebuildCapacity;


		public unsafe B2DynamicTree(B2TreeNode* nodes = default, int root = default, int nodeCount = default, int nodeCapacity = default, int freeList = default, int proxyCount = default, int* leafIndices = default, B2AABB* leafBoxes = default, Vector2* leafCenters = default, int* binIndices = default, int rebuildCapacity = default)
		{
			Nodes = nodes;
			Root = root;
			NodeCount = nodeCount;
			NodeCapacity = nodeCapacity;
			FreeList = freeList;
			ProxyCount = proxyCount;
			LeafIndices = leafIndices;
			LeafBoxes = leafBoxes;
			LeafCenters = leafCenters;
			BinIndices = binIndices;
			RebuildCapacity = rebuildCapacity;
		}


	}

}
