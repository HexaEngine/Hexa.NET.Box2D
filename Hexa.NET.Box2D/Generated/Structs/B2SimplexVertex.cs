// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// Simplex vertex for debugging the GJK algorithm<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2SimplexVertex")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2SimplexVertex
	{
		/// <summary>
		/// support point in proxyA<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "wA")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 WA;

		/// <summary>
		/// support point in proxyB<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "wB")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 WB;

		/// <summary>
		/// wB - wA<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "w")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 W;

		/// <summary>
		/// barycentric coordinate for closest point<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "a")]
		[NativeName(NativeNameType.Type, "float")]
		public float A;

		/// <summary>
		/// wA index<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "indexA")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int IndexA;

		/// <summary>
		/// wB index<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "indexB")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int IndexB;


		public unsafe B2SimplexVertex(Vector2 wa = default, Vector2 wb = default, Vector2 w = default, float a = default, int indexA = default, int indexB = default)
		{
			WA = wa;
			WB = wb;
			W = w;
			A = a;
			IndexA = indexA;
			IndexB = indexB;
		}


	}

}
