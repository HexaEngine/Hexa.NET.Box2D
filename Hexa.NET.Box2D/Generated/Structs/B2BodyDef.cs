// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// A body definition holds all the data needed to construct a rigid body.<br/>
	/// You can safely re-use body definitions. Shapes are added to a body after construction.<br/>
	/// Body definitions are temporary objects used to bundle creation parameters.<br/>
	/// Must be initialized using b2DefaultBodyDef().<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2BodyDef")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2BodyDef
	{
		/// <summary>
		/// The body type: static, kinematic, or dynamic.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "b2BodyType")]
		public B2BodyType Type;

		/// <summary>
		/// The initial world position of the body. Bodies should be created with the desired position.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "position")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 Position;

		/// <summary>
		/// The initial world rotation of the body. Use b2MakeRot() if you have an angle.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "rotation")]
		[NativeName(NativeNameType.Type, "b2Rot")]
		public B2Rot Rotation;

		/// <summary>
		/// The initial linear velocity of the body's origin. Typically in meters per second.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "linearVelocity")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 LinearVelocity;

		/// <summary>
		/// The initial angular velocity of the body. Radians per second.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "angularVelocity")]
		[NativeName(NativeNameType.Type, "float")]
		public float AngularVelocity;

		/// <summary>
		/// Linear damping is use to reduce the linear velocity. The damping parameter<br/>
		/// can be larger than 1 but the damping effect becomes sensitive to the<br/>
		/// time step when the damping parameter is large.<br/>
		/// Generally linear damping is undesirable because it makes objects move slowly<br/>
		/// as if they are floating.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "linearDamping")]
		[NativeName(NativeNameType.Type, "float")]
		public float LinearDamping;

		/// <summary>
		/// Angular damping is use to reduce the angular velocity. The damping parameter<br/>
		/// can be larger than 1.0f but the damping effect becomes sensitive to the<br/>
		/// time step when the damping parameter is large.<br/>
		/// Angular damping can be use slow down rotating bodies.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "angularDamping")]
		[NativeName(NativeNameType.Type, "float")]
		public float AngularDamping;

		/// <summary>
		/// Scale the gravity applied to this body. Non-dimensional.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "gravityScale")]
		[NativeName(NativeNameType.Type, "float")]
		public float GravityScale;

		/// <summary>
		/// Sleep velocity threshold, default is 0.05 meter per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "sleepThreshold")]
		[NativeName(NativeNameType.Type, "float")]
		public float SleepThreshold;

		/// <summary>
		/// Use this to store application specific body data.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "userData")]
		[NativeName(NativeNameType.Type, "void *")]
		public unsafe void* UserData;

		/// <summary>
		/// Set this flag to false if this body should never fall asleep.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "enableSleep")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte EnableSleep;

		/// <summary>
		/// Is this body initially awake or sleeping?<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "isAwake")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsAwake;

		/// <summary>
		/// Should this body be prevented from rotating? Useful for characters.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "fixedRotation")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte FixedRotation;

		/// <summary>
		/// Treat this body as high speed object that performs continuous collision detection<br/>
		/// against dynamic and kinematic bodies, but not other bullet bodies.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "isBullet")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsBullet;

		/// <summary>
		/// Used to disable a body. A disabled body does not move or collide.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "isEnabled")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsEnabled;

		/// <summary>
		/// Automatically compute mass and related properties on this body from shapes.<br/>
		/// Triggers whenever a shape is add/removed/changed. Default is true.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "automaticMass")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AutomaticMass;

		/// <summary>
		/// This allows this body to bypass rotational speed limits. Should only be used<br/>
		/// for circular objects, like wheels.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "allowFastRotation")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte AllowFastRotation;

		/// <summary>
		/// Used internally to detect a valid definition. DO NOT SET.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "internalValue")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int InternalValue;


		public unsafe B2BodyDef(B2BodyType type = default, Vector2 position = default, B2Rot rotation = default, Vector2 linearVelocity = default, float angularVelocity = default, float linearDamping = default, float angularDamping = default, float gravityScale = default, float sleepThreshold = default, void* userData = default, bool enableSleep = default, bool isAwake = default, bool fixedRotation = default, bool isBullet = default, bool isEnabled = default, bool automaticMass = default, bool allowFastRotation = default, int internalValue = default)
		{
			Type = type;
			Position = position;
			Rotation = rotation;
			LinearVelocity = linearVelocity;
			AngularVelocity = angularVelocity;
			LinearDamping = linearDamping;
			AngularDamping = angularDamping;
			GravityScale = gravityScale;
			SleepThreshold = sleepThreshold;
			UserData = userData;
			EnableSleep = enableSleep ? (byte)1 : (byte)0;
			IsAwake = isAwake ? (byte)1 : (byte)0;
			FixedRotation = fixedRotation ? (byte)1 : (byte)0;
			IsBullet = isBullet ? (byte)1 : (byte)0;
			IsEnabled = isEnabled ? (byte)1 : (byte)0;
			AutomaticMass = automaticMass ? (byte)1 : (byte)0;
			AllowFastRotation = allowFastRotation ? (byte)1 : (byte)0;
			InternalValue = internalValue;
		}


	}

}
