// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// Counters that give details of the simulation size.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2Counters")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2Counters
	{
		[NativeName(NativeNameType.Field, "staticBodyCount")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int StaticBodyCount;
		[NativeName(NativeNameType.Field, "bodyCount")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int BodyCount;
		[NativeName(NativeNameType.Field, "shapeCount")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int ShapeCount;
		[NativeName(NativeNameType.Field, "contactCount")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int ContactCount;
		[NativeName(NativeNameType.Field, "jointCount")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int JointCount;
		[NativeName(NativeNameType.Field, "islandCount")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int IslandCount;
		[NativeName(NativeNameType.Field, "stackUsed")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int StackUsed;
		[NativeName(NativeNameType.Field, "staticTreeHeight")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int StaticTreeHeight;
		[NativeName(NativeNameType.Field, "treeHeight")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int TreeHeight;
		[NativeName(NativeNameType.Field, "byteCount")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int ByteCount;
		[NativeName(NativeNameType.Field, "taskCount")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int TaskCount;
		[NativeName(NativeNameType.Field, "colorCounts")]
		[NativeName(NativeNameType.Type, "int32_t[12]")]
		public int ColorCounts_0;
		public int ColorCounts_1;
		public int ColorCounts_2;
		public int ColorCounts_3;
		public int ColorCounts_4;
		public int ColorCounts_5;
		public int ColorCounts_6;
		public int ColorCounts_7;
		public int ColorCounts_8;
		public int ColorCounts_9;
		public int ColorCounts_10;
		public int ColorCounts_11;

		public unsafe B2Counters(int staticBodyCount = default, int bodyCount = default, int shapeCount = default, int contactCount = default, int jointCount = default, int islandCount = default, int stackUsed = default, int staticTreeHeight = default, int treeHeight = default, int byteCount = default, int taskCount = default, int* colorCounts = default)
		{
			StaticBodyCount = staticBodyCount;
			BodyCount = bodyCount;
			ShapeCount = shapeCount;
			ContactCount = contactCount;
			JointCount = jointCount;
			IslandCount = islandCount;
			StackUsed = stackUsed;
			StaticTreeHeight = staticTreeHeight;
			TreeHeight = treeHeight;
			ByteCount = byteCount;
			TaskCount = taskCount;
			if (colorCounts != default(int*))
			{
				ColorCounts_0 = colorCounts[0];
				ColorCounts_1 = colorCounts[1];
				ColorCounts_2 = colorCounts[2];
				ColorCounts_3 = colorCounts[3];
				ColorCounts_4 = colorCounts[4];
				ColorCounts_5 = colorCounts[5];
				ColorCounts_6 = colorCounts[6];
				ColorCounts_7 = colorCounts[7];
				ColorCounts_8 = colorCounts[8];
				ColorCounts_9 = colorCounts[9];
				ColorCounts_10 = colorCounts[10];
				ColorCounts_11 = colorCounts[11];
			}
		}

		public unsafe B2Counters(int staticBodyCount = default, int bodyCount = default, int shapeCount = default, int contactCount = default, int jointCount = default, int islandCount = default, int stackUsed = default, int staticTreeHeight = default, int treeHeight = default, int byteCount = default, int taskCount = default, Span<int> colorCounts = default)
		{
			StaticBodyCount = staticBodyCount;
			BodyCount = bodyCount;
			ShapeCount = shapeCount;
			ContactCount = contactCount;
			JointCount = jointCount;
			IslandCount = islandCount;
			StackUsed = stackUsed;
			StaticTreeHeight = staticTreeHeight;
			TreeHeight = treeHeight;
			ByteCount = byteCount;
			TaskCount = taskCount;
			if (colorCounts != default(Span<int>))
			{
				ColorCounts_0 = colorCounts[0];
				ColorCounts_1 = colorCounts[1];
				ColorCounts_2 = colorCounts[2];
				ColorCounts_3 = colorCounts[3];
				ColorCounts_4 = colorCounts[4];
				ColorCounts_5 = colorCounts[5];
				ColorCounts_6 = colorCounts[6];
				ColorCounts_7 = colorCounts[7];
				ColorCounts_8 = colorCounts[8];
				ColorCounts_9 = colorCounts[9];
				ColorCounts_10 = colorCounts[10];
				ColorCounts_11 = colorCounts[11];
			}
		}


	}

}
