// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// Revolute joint definition<br/>
	/// This requires defining an anchor point where the bodies are joined.<br/>
	/// The definition uses local anchor points so that the<br/>
	/// initial configuration can violate the constraint slightly. You also need to<br/>
	/// specify the initial relative angle for joint limits. This helps when saving<br/>
	/// and loading a game.<br/>
	/// The local anchor points are measured from the body's origin<br/>
	/// rather than the center of mass because:<br/>
	/// 1. you might not know where the center of mass will be<br/>
	/// 2. if you add/remove shapes from a body and recompute the mass, the joints will be broken<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2RevoluteJointDef")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2RevoluteJointDef
	{
		/// <summary>
		/// The first attached body<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "bodyIdA")]
		[NativeName(NativeNameType.Type, "b2BodyId")]
		public B2BodyId BodyIdA;

		/// <summary>
		/// The second attached body<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "bodyIdB")]
		[NativeName(NativeNameType.Type, "b2BodyId")]
		public B2BodyId BodyIdB;

		/// <summary>
		/// The local anchor point relative to bodyA's origin<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "localAnchorA")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 LocalAnchorA;

		/// <summary>
		/// The local anchor point relative to bodyB's origin<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "localAnchorB")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 LocalAnchorB;

		/// <summary>
		/// The bodyB angle minus bodyA angle in the reference state (radians).<br/>
		/// This defines the zero angle for the joint limit.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "referenceAngle")]
		[NativeName(NativeNameType.Type, "float")]
		public float ReferenceAngle;

		/// <summary>
		/// Enable a rotational spring on the revolute hinge axis<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "enableSpring")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte EnableSpring;

		/// <summary>
		/// The spring stiffness Hertz, cycles per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "hertz")]
		[NativeName(NativeNameType.Type, "float")]
		public float Hertz;

		/// <summary>
		/// The spring damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "dampingRatio")]
		[NativeName(NativeNameType.Type, "float")]
		public float DampingRatio;

		/// <summary>
		/// A flag to enable joint limits<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "enableLimit")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte EnableLimit;

		/// <summary>
		/// The lower angle for the joint limit in radians<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "lowerAngle")]
		[NativeName(NativeNameType.Type, "float")]
		public float LowerAngle;

		/// <summary>
		/// The upper angle for the joint limit in radians<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "upperAngle")]
		[NativeName(NativeNameType.Type, "float")]
		public float UpperAngle;

		/// <summary>
		/// A flag to enable the joint motor<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "enableMotor")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte EnableMotor;

		/// <summary>
		/// The maximum motor torque, typically in newton-meters<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "maxMotorTorque")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxMotorTorque;

		/// <summary>
		/// The desired motor speed in radians per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "motorSpeed")]
		[NativeName(NativeNameType.Type, "float")]
		public float MotorSpeed;

		/// <summary>
		/// Scale the debug draw<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drawSize")]
		[NativeName(NativeNameType.Type, "float")]
		public float DrawSize;

		/// <summary>
		/// Set this flag to true if the attached bodies should collide<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "collideConnected")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte CollideConnected;

		/// <summary>
		/// User data pointer<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "userData")]
		[NativeName(NativeNameType.Type, "void *")]
		public unsafe void* UserData;

		/// <summary>
		/// Used internally to detect a valid definition. DO NOT SET.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "internalValue")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int InternalValue;


		public unsafe B2RevoluteJointDef(B2BodyId bodyIdA = default, B2BodyId bodyIdB = default, Vector2 localAnchorA = default, Vector2 localAnchorB = default, float referenceAngle = default, bool enableSpring = default, float hertz = default, float dampingRatio = default, bool enableLimit = default, float lowerAngle = default, float upperAngle = default, bool enableMotor = default, float maxMotorTorque = default, float motorSpeed = default, float drawSize = default, bool collideConnected = default, void* userData = default, int internalValue = default)
		{
			BodyIdA = bodyIdA;
			BodyIdB = bodyIdB;
			LocalAnchorA = localAnchorA;
			LocalAnchorB = localAnchorB;
			ReferenceAngle = referenceAngle;
			EnableSpring = enableSpring ? (byte)1 : (byte)0;
			Hertz = hertz;
			DampingRatio = dampingRatio;
			EnableLimit = enableLimit ? (byte)1 : (byte)0;
			LowerAngle = lowerAngle;
			UpperAngle = upperAngle;
			EnableMotor = enableMotor ? (byte)1 : (byte)0;
			MaxMotorTorque = maxMotorTorque;
			MotorSpeed = motorSpeed;
			DrawSize = drawSize;
			CollideConnected = collideConnected ? (byte)1 : (byte)0;
			UserData = userData;
			InternalValue = internalValue;
		}


	}

}
