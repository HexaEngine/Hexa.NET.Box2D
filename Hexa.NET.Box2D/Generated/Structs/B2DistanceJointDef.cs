// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// Distance joint definition<br/>
	/// This requires defining an anchor point on both<br/>
	/// bodies and the non-zero distance of the distance joint. The definition uses<br/>
	/// local anchor points so that the initial configuration can violate the<br/>
	/// constraint slightly. This helps when saving and loading a game.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2DistanceJointDef")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2DistanceJointDef
	{
		/// <summary>
		/// The first attached body<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "bodyIdA")]
		[NativeName(NativeNameType.Type, "b2BodyId")]
		public B2BodyId BodyIdA;

		/// <summary>
		/// The second attached body<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "bodyIdB")]
		[NativeName(NativeNameType.Type, "b2BodyId")]
		public B2BodyId BodyIdB;

		/// <summary>
		/// The local anchor point relative to bodyA's origin<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "localAnchorA")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 LocalAnchorA;

		/// <summary>
		/// The local anchor point relative to bodyB's origin<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "localAnchorB")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 LocalAnchorB;

		/// <summary>
		/// The rest length of this joint. Clamped to a stable minimum value.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "length")]
		[NativeName(NativeNameType.Type, "float")]
		public float Length;

		/// <summary>
		/// Enable the distance constraint to behave like a spring. If false<br/>
		/// then the distance joint will be rigid, overriding the limit and motor.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "enableSpring")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte EnableSpring;

		/// <summary>
		/// The spring linear stiffness Hertz, cycles per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "hertz")]
		[NativeName(NativeNameType.Type, "float")]
		public float Hertz;

		/// <summary>
		/// The spring linear damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "dampingRatio")]
		[NativeName(NativeNameType.Type, "float")]
		public float DampingRatio;

		/// <summary>
		/// Enable/disable the joint limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "enableLimit")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte EnableLimit;

		/// <summary>
		/// Minimum length. Clamped to a stable minimum value.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "minLength")]
		[NativeName(NativeNameType.Type, "float")]
		public float MinLength;

		/// <summary>
		/// Maximum length. Must be greater than or equal to the minimum length.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "maxLength")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxLength;

		/// <summary>
		/// Enable/disable the joint motor<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "enableMotor")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte EnableMotor;

		/// <summary>
		/// The maximum motor force, usually in newtons<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "maxMotorForce")]
		[NativeName(NativeNameType.Type, "float")]
		public float MaxMotorForce;

		/// <summary>
		/// The desired motor speed, usually in meters per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "motorSpeed")]
		[NativeName(NativeNameType.Type, "float")]
		public float MotorSpeed;

		/// <summary>
		/// Set this flag to true if the attached bodies should collide<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "collideConnected")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte CollideConnected;

		/// <summary>
		/// User data pointer<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "userData")]
		[NativeName(NativeNameType.Type, "void *")]
		public unsafe void* UserData;

		/// <summary>
		/// Used internally to detect a valid definition. DO NOT SET.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "internalValue")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int InternalValue;


		public unsafe B2DistanceJointDef(B2BodyId bodyIdA = default, B2BodyId bodyIdB = default, Vector2 localAnchorA = default, Vector2 localAnchorB = default, float length = default, bool enableSpring = default, float hertz = default, float dampingRatio = default, bool enableLimit = default, float minLength = default, float maxLength = default, bool enableMotor = default, float maxMotorForce = default, float motorSpeed = default, bool collideConnected = default, void* userData = default, int internalValue = default)
		{
			BodyIdA = bodyIdA;
			BodyIdB = bodyIdB;
			LocalAnchorA = localAnchorA;
			LocalAnchorB = localAnchorB;
			Length = length;
			EnableSpring = enableSpring ? (byte)1 : (byte)0;
			Hertz = hertz;
			DampingRatio = dampingRatio;
			EnableLimit = enableLimit ? (byte)1 : (byte)0;
			MinLength = minLength;
			MaxLength = maxLength;
			EnableMotor = enableMotor ? (byte)1 : (byte)0;
			MaxMotorForce = maxMotorForce;
			MotorSpeed = motorSpeed;
			CollideConnected = collideConnected ? (byte)1 : (byte)0;
			UserData = userData;
			InternalValue = internalValue;
		}


	}

}
