// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// This struct holds callbacks you can implement to draw a Box2D world.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2DebugDraw")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2DebugDraw
	{
		/// <summary>
		/// Draw a closed polygon provided in CCW order.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawPolygon")]
		[NativeName(NativeNameType.Type, "void (*)(const b2Vec2* vertices, int vertexCount, b2HexColor color, void* context)*")]
		public unsafe void* DrawPolygon;

		/// <summary>
		/// Draw a solid closed polygon provided in CCW order.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawSolidPolygon")]
		[NativeName(NativeNameType.Type, "void (*)(b2Transform transform, const b2Vec2* vertices, int vertexCount, float radius, b2HexColor color, void* context)*")]
		public unsafe void* DrawSolidPolygon;

		/// <summary>
		/// Draw a circle.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawCircle")]
		[NativeName(NativeNameType.Type, "void (*)(b2Vec2 center, float radius, b2HexColor color, void* context)*")]
		public unsafe void* DrawCircle;

		/// <summary>
		/// Draw a solid circle.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawSolidCircle")]
		[NativeName(NativeNameType.Type, "void (*)(b2Transform transform, float radius, b2HexColor color, void* context)*")]
		public unsafe void* DrawSolidCircle;

		/// <summary>
		/// Draw a capsule.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawCapsule")]
		[NativeName(NativeNameType.Type, "void (*)(b2Vec2 p1, b2Vec2 p2, float radius, b2HexColor color, void* context)*")]
		public unsafe void* DrawCapsule;

		/// <summary>
		/// Draw a solid capsule.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawSolidCapsule")]
		[NativeName(NativeNameType.Type, "void (*)(b2Vec2 p1, b2Vec2 p2, float radius, b2HexColor color, void* context)*")]
		public unsafe void* DrawSolidCapsule;

		/// <summary>
		/// Draw a line segment.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawSegment")]
		[NativeName(NativeNameType.Type, "void (*)(b2Vec2 p1, b2Vec2 p2, b2HexColor color, void* context)*")]
		public unsafe void* DrawSegment;

		/// <summary>
		/// Draw a transform. Choose your own length scale.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawTransform")]
		[NativeName(NativeNameType.Type, "void (*)(b2Transform transform, void* context)*")]
		public unsafe void* DrawTransform;

		/// <summary>
		/// Draw a point.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawPoint")]
		[NativeName(NativeNameType.Type, "void (*)(b2Vec2 p, float size, b2HexColor color, void* context)*")]
		public unsafe void* DrawPoint;

		/// <summary>
		/// Draw a string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "DrawString")]
		[NativeName(NativeNameType.Type, "void (*)(b2Vec2 p, const char* s, void* context)*")]
		public unsafe void* DrawString;

		/// <summary>
		/// Bounds to use if restricting drawing to a rectangular region<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drawingBounds")]
		[NativeName(NativeNameType.Type, "b2AABB")]
		public B2AABB DrawingBounds;

		/// <summary>
		/// Option to restrict drawing to a rectangular region. May suffer from unstable depth sorting.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "useDrawingBounds")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte UseDrawingBounds;

		/// <summary>
		/// Option to draw shapes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drawShapes")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DrawShapes;

		/// <summary>
		/// Option to draw joints<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drawJoints")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DrawJoints;

		/// <summary>
		/// Option to draw additional information for joints<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drawJointExtras")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DrawJointExtras;

		/// <summary>
		/// Option to draw the bounding boxes for shapes<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drawAABBs")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DrawAABBs;

		/// <summary>
		/// Option to draw the mass and center of mass of dynamic bodies<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drawMass")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DrawMass;

		/// <summary>
		/// Option to draw contact points<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drawContacts")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DrawContacts;

		/// <summary>
		/// Option to visualize the graph coloring used for contacts and joints<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drawGraphColors")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DrawGraphColors;

		/// <summary>
		/// Option to draw contact normals<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drawContactNormals")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DrawContactNormals;

		/// <summary>
		/// Option to draw contact normal impulses<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drawContactImpulses")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DrawContactImpulses;

		/// <summary>
		/// Option to draw contact friction impulses<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drawFrictionImpulses")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte DrawFrictionImpulses;

		/// <summary>
		/// User context that is passed as an argument to drawing callback functions<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "context")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* Context;


		public unsafe B2DebugDraw(delegate*<Vector2*, int, B2HexColor, void*, void> drawPolygon = default, delegate*<B2Transform, Vector2*, int, float, B2HexColor, void*, void> drawSolidPolygon = default, delegate*<Vector2, float, B2HexColor, void*, void> drawCircle = default, delegate*<B2Transform, float, B2HexColor, void*, void> drawSolidCircle = default, delegate*<Vector2, Vector2, float, B2HexColor, void*, void> drawCapsule = default, delegate*<Vector2, Vector2, float, B2HexColor, void*, void> drawSolidCapsule = default, delegate*<Vector2, Vector2, B2HexColor, void*, void> drawSegment = default, delegate*<B2Transform, void*, void> drawTransform = default, delegate*<Vector2, float, B2HexColor, void*, void> drawPoint = default, delegate*<Vector2, byte*, void*, void> drawString = default, B2AABB drawingBounds = default, bool useDrawingBounds = default, bool drawShapes = default, bool drawJoints = default, bool drawJointExtras = default, bool drawAABBs = default, bool drawMass = default, bool drawContacts = default, bool drawGraphColors = default, bool drawContactNormals = default, bool drawContactImpulses = default, bool drawFrictionImpulses = default, void* context = default)
		{
			DrawPolygon = (void*)drawPolygon;
			DrawSolidPolygon = (void*)drawSolidPolygon;
			DrawCircle = (void*)drawCircle;
			DrawSolidCircle = (void*)drawSolidCircle;
			DrawCapsule = (void*)drawCapsule;
			DrawSolidCapsule = (void*)drawSolidCapsule;
			DrawSegment = (void*)drawSegment;
			DrawTransform = (void*)drawTransform;
			DrawPoint = (void*)drawPoint;
			DrawString = (void*)drawString;
			DrawingBounds = drawingBounds;
			UseDrawingBounds = useDrawingBounds ? (byte)1 : (byte)0;
			DrawShapes = drawShapes ? (byte)1 : (byte)0;
			DrawJoints = drawJoints ? (byte)1 : (byte)0;
			DrawJointExtras = drawJointExtras ? (byte)1 : (byte)0;
			DrawAABBs = drawAABBs ? (byte)1 : (byte)0;
			DrawMass = drawMass ? (byte)1 : (byte)0;
			DrawContacts = drawContacts ? (byte)1 : (byte)0;
			DrawGraphColors = drawGraphColors ? (byte)1 : (byte)0;
			DrawContactNormals = drawContactNormals ? (byte)1 : (byte)0;
			DrawContactImpulses = drawContactImpulses ? (byte)1 : (byte)0;
			DrawFrictionImpulses = drawFrictionImpulses ? (byte)1 : (byte)0;
			Context = context;
		}


	}

}
