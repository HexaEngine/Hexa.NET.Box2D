// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// A convex hull. Used to create convex polygons.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2Hull")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2Hull
	{
		/// <summary>
		/// The final points of the hull<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "points")]
		[NativeName(NativeNameType.Type, "b2Vec2[8]")]
		public Vector2 Points_0;
		public Vector2 Points_1;
		public Vector2 Points_2;
		public Vector2 Points_3;
		public Vector2 Points_4;
		public Vector2 Points_5;
		public Vector2 Points_6;
		public Vector2 Points_7;

		/// <summary>
		/// The number of points<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "count")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int Count;


		public unsafe B2Hull(Vector2* points = default, int count = default)
		{
			if (points != default(Vector2*))
			{
				Points_0 = points[0];
				Points_1 = points[1];
				Points_2 = points[2];
				Points_3 = points[3];
				Points_4 = points[4];
				Points_5 = points[5];
				Points_6 = points[6];
				Points_7 = points[7];
			}
			Count = count;
		}

		public unsafe B2Hull(Span<Vector2> points = default, int count = default)
		{
			if (points != default(Span<Vector2>))
			{
				Points_0 = points[0];
				Points_1 = points[1];
				Points_2 = points[2];
				Points_3 = points[3];
				Points_4 = points[4];
				Points_5 = points[5];
				Points_6 = points[6];
				Points_7 = points[7];
			}
			Count = count;
		}


		/// <summary>
		/// The final points of the hull<br/>
		/// </summary>
		public unsafe Span<Vector2> Points
		
		{
			get
			{
				fixed (Vector2* p = &this.Points_0)
				{
					return new Span<Vector2>(p, 8);
				}
			}
		}
	}

}
