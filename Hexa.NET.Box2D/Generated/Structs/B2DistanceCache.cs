// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// Used to warm start b2Distance. Set count to zero on first call or<br/>
	/// use zero initialization.<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2DistanceCache")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2DistanceCache
	{
		/// <summary>
		/// The number of stored simplex points<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "count")]
		[NativeName(NativeNameType.Type, "uint16_t")]
		public ushort Count;

		/// <summary>
		/// The cached simplex indices on shape A<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "indexA")]
		[NativeName(NativeNameType.Type, "uint8_t[3]")]
		public byte IndexA_0;
		public byte IndexA_1;
		public byte IndexA_2;

		/// <summary>
		/// The cached simplex indices on shape B<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "indexB")]
		[NativeName(NativeNameType.Type, "uint8_t[3]")]
		public byte IndexB_0;
		public byte IndexB_1;
		public byte IndexB_2;


		public unsafe B2DistanceCache(ushort count = default, byte* indexA = default, byte* indexB = default)
		{
			Count = count;
			if (indexA != default(byte*))
			{
				IndexA_0 = indexA[0];
				IndexA_1 = indexA[1];
				IndexA_2 = indexA[2];
			}
			if (indexB != default(byte*))
			{
				IndexB_0 = indexB[0];
				IndexB_1 = indexB[1];
				IndexB_2 = indexB[2];
			}
		}

		public unsafe B2DistanceCache(ushort count = default, Span<byte> indexA = default, Span<byte> indexB = default)
		{
			Count = count;
			if (indexA != default(Span<byte>))
			{
				IndexA_0 = indexA[0];
				IndexA_1 = indexA[1];
				IndexA_2 = indexA[2];
			}
			if (indexB != default(Span<byte>))
			{
				IndexB_0 = indexB[0];
				IndexB_1 = indexB[1];
				IndexB_2 = indexB[2];
			}
		}


	}

}
