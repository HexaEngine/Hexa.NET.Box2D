// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// A contact manifold describes the contact points between colliding shapes<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2Manifold")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2Manifold
	{
		/// <summary>
		/// The manifold points, up to two are possible in 2D<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "points")]
		[NativeName(NativeNameType.Type, "b2ManifoldPoint[2]")]
		public B2ManifoldPoint Points_0;
		public B2ManifoldPoint Points_1;

		/// <summary>
		/// The unit normal vector in world space, points from shape A to bodyB<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "normal")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 Normal;

		/// <summary>
		/// The number of contacts points, will be 0, 1, or 2<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pointCount")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int PointCount;


		public unsafe B2Manifold(B2ManifoldPoint* points = default, Vector2 normal = default, int pointCount = default)
		{
			if (points != default(B2ManifoldPoint*))
			{
				Points_0 = points[0];
				Points_1 = points[1];
			}
			Normal = normal;
			PointCount = pointCount;
		}

		public unsafe B2Manifold(Span<B2ManifoldPoint> points = default, Vector2 normal = default, int pointCount = default)
		{
			if (points != default(Span<B2ManifoldPoint>))
			{
				Points_0 = points[0];
				Points_1 = points[1];
			}
			Normal = normal;
			PointCount = pointCount;
		}


		/// <summary>
		/// The manifold points, up to two are possible in 2D<br/>
		/// </summary>
		public unsafe Span<B2ManifoldPoint> Points
		
		{
			get
			{
				fixed (B2ManifoldPoint* p = &this.Points_0)
				{
					return new Span<B2ManifoldPoint>(p, 2);
				}
			}
		}
	}

}
