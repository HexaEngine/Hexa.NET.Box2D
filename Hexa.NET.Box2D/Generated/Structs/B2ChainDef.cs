// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// Used to create a chain of edges. This is designed to eliminate ghost collisions with some limitations.<br/>
	/// - chains are one-sided<br/>
	/// - chains have no mass and should be used on static bodies<br/>
	/// - chains have a counter-clockwise winding order<br/>
	/// - chains are either a loop or open<br/>
	/// - a chain must have at least 4 points<br/>
	/// - the distance between any two points must be greater than b2_linearSlop<br/>
	/// - a chain shape should not self intersect (this is not validated)<br/>
	/// - an open chain shape has NO COLLISION on the first and final edge<br/>
	/// - you may overlap two open chains on their first three and/or last three points to get smooth collision<br/>
	/// - a chain shape creates multiple smooth edges shapes on the body<br/>
	/// https://en.wikipedia.org/wiki/Polygonal_chain<br/>
	/// Must be initialized using b2DefaultChainDef().<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2ChainDef")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2ChainDef
	{
		/// <summary>
		/// Use this to store application specific shape data.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "userData")]
		[NativeName(NativeNameType.Type, "void *")]
		public unsafe void* UserData;

		/// <summary>
		/// An array of at least 4 points. These are cloned and may be temporary.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "points")]
		[NativeName(NativeNameType.Type, "b2Vec2 const *")]
		public unsafe Vector2* Points;

		/// <summary>
		/// The point count, must be 4 or more.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "count")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int Count;

		/// <summary>
		/// The friction coefficient, usually in the range [0,1].<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "friction")]
		[NativeName(NativeNameType.Type, "float")]
		public float Friction;

		/// <summary>
		/// The restitution (elasticity) usually in the range [0,1].<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "restitution")]
		[NativeName(NativeNameType.Type, "float")]
		public float Restitution;

		/// <summary>
		/// Contact filtering data.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "filter")]
		[NativeName(NativeNameType.Type, "b2Filter")]
		public B2Filter Filter;

		/// <summary>
		/// Indicates a closed chain formed by connecting the first and last points<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "isLoop")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte IsLoop;

		/// <summary>
		/// Used internally to detect a valid definition. DO NOT SET.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "internalValue")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int InternalValue;


		public unsafe B2ChainDef(void* userData = default, Vector2* points = default, int count = default, float friction = default, float restitution = default, B2Filter filter = default, bool isLoop = default, int internalValue = default)
		{
			UserData = userData;
			Points = points;
			Count = count;
			Friction = friction;
			Restitution = restitution;
			Filter = filter;
			IsLoop = isLoop ? (byte)1 : (byte)0;
			InternalValue = internalValue;
		}


	}

}
