// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// A node in the dynamic tree. This is private data placed here for performance reasons.<br/>
	/// 16 + 16 + 8 + pad(8)<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2TreeNode")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2TreeNode
	{
		[NativeName(NativeNameType.StructOrClass, "b2TreeNode::")]
		[StructLayout(LayoutKind.Explicit)]
		public partial struct B2TreeNodeUnion
		{
			/// <summary>
			/// The node parent index<br/>
			/// </summary>
			[NativeName(NativeNameType.Field, "parent")]
			[NativeName(NativeNameType.Type, "int32_t")]
			[FieldOffset(0)]
			public int Parent;

			/// <summary>
			/// The node freelist next index<br/>
			/// </summary>
			[NativeName(NativeNameType.Field, "next")]
			[NativeName(NativeNameType.Type, "int32_t")]
			[FieldOffset(0)]
			public int Next;


			public unsafe B2TreeNodeUnion(int parent = default, int next = default)
			{
				Parent = parent;
				Next = next;
			}


		}

		/// <summary>
		/// 16<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "aabb")]
		[NativeName(NativeNameType.Type, "b2AABB")]
		public B2AABB Aabb;

		/// <summary>
		/// 4<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "categoryBits")]
		[NativeName(NativeNameType.Type, "uint32_t")]
		public uint CategoryBits;

		[NativeName(NativeNameType.Field, "")]
		[NativeName(NativeNameType.Type, "")]
		public B2TreeNodeUnion Union;
		/// <summary>
		/// 4<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "child1")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int Child1;

		/// <summary>
		/// 4<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "child2")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int Child2;

		/// <summary>
		/// 4<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "userData")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int UserData;

		/// <summary>
		/// 2<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "height")]
		[NativeName(NativeNameType.Type, "int16_t")]
		public short Height;

		/// <summary>
		/// 1<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "enlarged")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Enlarged;

		/// <summary>
		/// Padding for clarity<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pad")]
		[NativeName(NativeNameType.Type, "char[9]")]
		public byte Pad_0;
		public byte Pad_1;
		public byte Pad_2;
		public byte Pad_3;
		public byte Pad_4;
		public byte Pad_5;
		public byte Pad_6;
		public byte Pad_7;
		public byte Pad_8;


		public unsafe B2TreeNode(B2AABB aabb = default, uint categoryBits = default, B2TreeNodeUnion union = default, int child1 = default, int child2 = default, int userData = default, short height = default, bool enlarged = default, byte* pad = default)
		{
			Aabb = aabb;
			CategoryBits = categoryBits;
			Union = union;
			Child1 = child1;
			Child2 = child2;
			UserData = userData;
			Height = height;
			Enlarged = enlarged ? (byte)1 : (byte)0;
			if (pad != default(byte*))
			{
				Pad_0 = pad[0];
				Pad_1 = pad[1];
				Pad_2 = pad[2];
				Pad_3 = pad[3];
				Pad_4 = pad[4];
				Pad_5 = pad[5];
				Pad_6 = pad[6];
				Pad_7 = pad[7];
				Pad_8 = pad[8];
			}
		}

		public unsafe B2TreeNode(B2AABB aabb = default, uint categoryBits = default, B2TreeNodeUnion union = default, int child1 = default, int child2 = default, int userData = default, short height = default, bool enlarged = default, Span<byte> pad = default)
		{
			Aabb = aabb;
			CategoryBits = categoryBits;
			Union = union;
			Child1 = child1;
			Child2 = child2;
			UserData = userData;
			Height = height;
			Enlarged = enlarged ? (byte)1 : (byte)0;
			if (pad != default(Span<byte>))
			{
				Pad_0 = pad[0];
				Pad_1 = pad[1];
				Pad_2 = pad[2];
				Pad_3 = pad[3];
				Pad_4 = pad[4];
				Pad_5 = pad[5];
				Pad_6 = pad[6];
				Pad_7 = pad[7];
				Pad_8 = pad[8];
			}
		}


	}

}
