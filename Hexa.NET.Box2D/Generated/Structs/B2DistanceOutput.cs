// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// Output for b2ShapeDistance<br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2DistanceOutput")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2DistanceOutput
	{
		/// <summary>
		/// Closest point on shapeA<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pointA")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 PointA;

		/// <summary>
		/// Closest point on shapeB<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pointB")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 PointB;

		/// <summary>
		/// The final distance, zero if overlapped<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "distance")]
		[NativeName(NativeNameType.Type, "float")]
		public float Distance;

		/// <summary>
		/// Number of GJK iterations used<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "iterations")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int Iterations;

		/// <summary>
		/// The number of simplexes stored in the simplex array<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "simplexCount")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int SimplexCount;


		public unsafe B2DistanceOutput(Vector2 pointA = default, Vector2 pointB = default, float distance = default, int iterations = default, int simplexCount = default)
		{
			PointA = pointA;
			PointB = pointB;
			Distance = distance;
			Iterations = iterations;
			SimplexCount = simplexCount;
		}


	}

}
