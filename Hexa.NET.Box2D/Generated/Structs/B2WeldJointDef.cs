// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	/// <summary>
	/// Weld joint definition<br/>
	/// A weld joint connect to bodies together rigidly. This constraint provides springs to mimic<br/>
	/// soft-body simulation.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "b2WeldJointDef")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct B2WeldJointDef
	{
		/// <summary>
		/// The first attached body<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "bodyIdA")]
		[NativeName(NativeNameType.Type, "b2BodyId")]
		public B2BodyId BodyIdA;

		/// <summary>
		/// The second attached body<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "bodyIdB")]
		[NativeName(NativeNameType.Type, "b2BodyId")]
		public B2BodyId BodyIdB;

		/// <summary>
		/// The local anchor point relative to bodyA's origin<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "localAnchorA")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 LocalAnchorA;

		/// <summary>
		/// The local anchor point relative to bodyB's origin<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "localAnchorB")]
		[NativeName(NativeNameType.Type, "b2Vec2")]
		public Vector2 LocalAnchorB;

		/// <summary>
		/// The bodyB angle minus bodyA angle in the reference state (radians)<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "referenceAngle")]
		[NativeName(NativeNameType.Type, "float")]
		public float ReferenceAngle;

		/// <summary>
		/// Linear stiffness expressed as Hertz (cycles per second). Use zero for maximum stiffness.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "linearHertz")]
		[NativeName(NativeNameType.Type, "float")]
		public float LinearHertz;

		/// <summary>
		/// Angular stiffness as Hertz (cycles per second). Use zero for maximum stiffness.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "angularHertz")]
		[NativeName(NativeNameType.Type, "float")]
		public float AngularHertz;

		/// <summary>
		/// Linear damping ratio, non-dimensional. Use 1 for critical damping.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "linearDampingRatio")]
		[NativeName(NativeNameType.Type, "float")]
		public float LinearDampingRatio;

		/// <summary>
		/// Linear damping ratio, non-dimensional. Use 1 for critical damping.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "angularDampingRatio")]
		[NativeName(NativeNameType.Type, "float")]
		public float AngularDampingRatio;

		/// <summary>
		/// Set this flag to true if the attached bodies should collide<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "collideConnected")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte CollideConnected;

		/// <summary>
		/// User data pointer<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "userData")]
		[NativeName(NativeNameType.Type, "void*")]
		public unsafe void* UserData;

		/// <summary>
		/// Used internally to detect a valid definition. DO NOT SET.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "internalValue")]
		[NativeName(NativeNameType.Type, "int32_t")]
		public int InternalValue;


		public unsafe B2WeldJointDef(B2BodyId bodyIdA = default, B2BodyId bodyIdB = default, Vector2 localAnchorA = default, Vector2 localAnchorB = default, float referenceAngle = default, float linearHertz = default, float angularHertz = default, float linearDampingRatio = default, float angularDampingRatio = default, bool collideConnected = default, void* userData = default, int internalValue = default)
		{
			BodyIdA = bodyIdA;
			BodyIdB = bodyIdB;
			LocalAnchorA = localAnchorA;
			LocalAnchorB = localAnchorB;
			ReferenceAngle = referenceAngle;
			LinearHertz = linearHertz;
			AngularHertz = angularHertz;
			LinearDampingRatio = linearDampingRatio;
			AngularDampingRatio = angularDampingRatio;
			CollideConnected = collideConnected ? (byte)1 : (byte)0;
			UserData = userData;
			InternalValue = internalValue;
		}


	}

}
