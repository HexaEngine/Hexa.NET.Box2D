// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.Box2D
{
	public unsafe partial class Box2D
	{

		/// <summary>
		/// Get the mouse joint damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2MouseJoint_GetSpringDampingRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float MouseJointGetSpringDampingRatio([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = MouseJointGetSpringDampingRatioNative(jointId);
			return ret;
		}

		/// <summary>
		/// Set the mouse joint maximum force, typically in newtons<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2MouseJoint_SetMaxForce")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MouseJointSetMaxForceNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "maxForce")] [NativeName(NativeNameType.Type, "float")] float maxForce)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[290])(jointId, maxForce);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[290])(jointId, maxForce);
			#endif
		}

		/// <summary>
		/// Set the mouse joint maximum force, typically in newtons<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2MouseJoint_SetMaxForce")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void MouseJointSetMaxForce([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "maxForce")] [NativeName(NativeNameType.Type, "float")] float maxForce)
		{
			MouseJointSetMaxForceNative(jointId, maxForce);
		}

		/// <summary>
		/// Get the mouse joint maximum force, typically in newtons<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2MouseJoint_GetMaxForce")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float MouseJointGetMaxForceNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[291])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[291])(jointId);
			#endif
		}

		/// <summary>
		/// Get the mouse joint maximum force, typically in newtons<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2MouseJoint_GetMaxForce")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float MouseJointGetMaxForce([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = MouseJointGetMaxForceNative(jointId);
			return ret;
		}

		/// <summary>
		/// Create a prismatic (slider) joint.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2CreatePrismaticJoint")]
		[return: NativeName(NativeNameType.Type, "b2JointId")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static B2JointId CreatePrismaticJointNative([NativeName(NativeNameType.Param, "worldId")] [NativeName(NativeNameType.Type, "b2WorldId")] B2WorldId worldId, [NativeName(NativeNameType.Param, "def")] [NativeName(NativeNameType.Type, "b2PrismaticJointDef const *")] B2PrismaticJointDef* def)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2WorldId, B2PrismaticJointDef*, B2JointId>)funcTable[292])(worldId, def);
			#else
			return (B2JointId)((delegate* unmanaged[Cdecl]<B2WorldId, nint, B2JointId>)funcTable[292])(worldId, (nint)def);
			#endif
		}

		/// <summary>
		/// Create a prismatic (slider) joint.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2CreatePrismaticJoint")]
		[return: NativeName(NativeNameType.Type, "b2JointId")]
		public static B2JointId CreatePrismaticJoint([NativeName(NativeNameType.Param, "worldId")] [NativeName(NativeNameType.Type, "b2WorldId")] B2WorldId worldId, [NativeName(NativeNameType.Param, "def")] [NativeName(NativeNameType.Type, "b2PrismaticJointDef const *")] B2PrismaticJointDef* def)
		{
			B2JointId ret = CreatePrismaticJointNative(worldId, def);
			return ret;
		}

		/// <summary>
		/// Create a prismatic (slider) joint.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2CreatePrismaticJoint")]
		[return: NativeName(NativeNameType.Type, "b2JointId")]
		public static B2JointId CreatePrismaticJoint([NativeName(NativeNameType.Param, "worldId")] [NativeName(NativeNameType.Type, "b2WorldId")] B2WorldId worldId, [NativeName(NativeNameType.Param, "def")] [NativeName(NativeNameType.Type, "b2PrismaticJointDef const *")] ref B2PrismaticJointDef def)
		{
			fixed (B2PrismaticJointDef* pdef = &def)
			{
				B2JointId ret = CreatePrismaticJointNative(worldId, (B2PrismaticJointDef*)pdef);
				return ret;
			}
		}

		/// <summary>
		/// Enable/disable the joint spring.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_EnableSpring")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrismaticJointEnableSpringNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableSpring")] [NativeName(NativeNameType.Type, "bool")] byte enableSpring)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[293])(jointId, enableSpring);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[293])(jointId, enableSpring);
			#endif
		}

		/// <summary>
		/// Enable/disable the joint spring.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_EnableSpring")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrismaticJointEnableSpring([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableSpring")] [NativeName(NativeNameType.Type, "bool")] bool enableSpring)
		{
			PrismaticJointEnableSpringNative(jointId, enableSpring ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Is the prismatic joint spring enabled or not?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_IsSpringEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte PrismaticJointIsSpringEnabledNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[294])(jointId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[294])(jointId);
			#endif
		}

		/// <summary>
		/// Is the prismatic joint spring enabled or not?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_IsSpringEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PrismaticJointIsSpringEnabled([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			byte ret = PrismaticJointIsSpringEnabledNative(jointId);
			return ret != 0;
		}

		/// <summary>
		/// Set the prismatic joint stiffness in Hertz.<br/>
		/// This should usually be less than a quarter of the simulation rate. For example, if the simulation<br/>
		/// runs at 60Hz then the joint stiffness should be 15Hz or less.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_SetSpringHertz")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrismaticJointSetSpringHertzNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "hertz")] [NativeName(NativeNameType.Type, "float")] float hertz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[295])(jointId, hertz);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[295])(jointId, hertz);
			#endif
		}

		/// <summary>
		/// Set the prismatic joint stiffness in Hertz.<br/>
		/// This should usually be less than a quarter of the simulation rate. For example, if the simulation<br/>
		/// runs at 60Hz then the joint stiffness should be 15Hz or less.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_SetSpringHertz")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrismaticJointSetSpringHertz([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "hertz")] [NativeName(NativeNameType.Type, "float")] float hertz)
		{
			PrismaticJointSetSpringHertzNative(jointId, hertz);
		}

		/// <summary>
		/// Get the prismatic joint stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetSpringHertz")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float PrismaticJointGetSpringHertzNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[296])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[296])(jointId);
			#endif
		}

		/// <summary>
		/// Get the prismatic joint stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetSpringHertz")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float PrismaticJointGetSpringHertz([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = PrismaticJointGetSpringHertzNative(jointId);
			return ret;
		}

		/// <summary>
		/// Set the prismatic joint damping ratio (non-dimensional)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_SetSpringDampingRatio")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrismaticJointSetSpringDampingRatioNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "dampingRatio")] [NativeName(NativeNameType.Type, "float")] float dampingRatio)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[297])(jointId, dampingRatio);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[297])(jointId, dampingRatio);
			#endif
		}

		/// <summary>
		/// Set the prismatic joint damping ratio (non-dimensional)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_SetSpringDampingRatio")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrismaticJointSetSpringDampingRatio([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "dampingRatio")] [NativeName(NativeNameType.Type, "float")] float dampingRatio)
		{
			PrismaticJointSetSpringDampingRatioNative(jointId, dampingRatio);
		}

		/// <summary>
		/// Get the prismatic spring damping ratio (non-dimensional)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetSpringDampingRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float PrismaticJointGetSpringDampingRatioNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[298])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[298])(jointId);
			#endif
		}

		/// <summary>
		/// Get the prismatic spring damping ratio (non-dimensional)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetSpringDampingRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float PrismaticJointGetSpringDampingRatio([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = PrismaticJointGetSpringDampingRatioNative(jointId);
			return ret;
		}

		/// <summary>
		/// Enable/disable a prismatic joint limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_EnableLimit")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrismaticJointEnableLimitNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableLimit")] [NativeName(NativeNameType.Type, "bool")] byte enableLimit)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[299])(jointId, enableLimit);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[299])(jointId, enableLimit);
			#endif
		}

		/// <summary>
		/// Enable/disable a prismatic joint limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_EnableLimit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrismaticJointEnableLimit([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableLimit")] [NativeName(NativeNameType.Type, "bool")] bool enableLimit)
		{
			PrismaticJointEnableLimitNative(jointId, enableLimit ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Is the prismatic joint limit enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_IsLimitEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte PrismaticJointIsLimitEnabledNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[300])(jointId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[300])(jointId);
			#endif
		}

		/// <summary>
		/// Is the prismatic joint limit enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_IsLimitEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PrismaticJointIsLimitEnabled([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			byte ret = PrismaticJointIsLimitEnabledNative(jointId);
			return ret != 0;
		}

		/// <summary>
		/// Get the prismatic joint lower limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetLowerLimit")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float PrismaticJointGetLowerLimitNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[301])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[301])(jointId);
			#endif
		}

		/// <summary>
		/// Get the prismatic joint lower limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetLowerLimit")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float PrismaticJointGetLowerLimit([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = PrismaticJointGetLowerLimitNative(jointId);
			return ret;
		}

		/// <summary>
		/// Get the prismatic joint upper limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetUpperLimit")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float PrismaticJointGetUpperLimitNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[302])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[302])(jointId);
			#endif
		}

		/// <summary>
		/// Get the prismatic joint upper limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetUpperLimit")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float PrismaticJointGetUpperLimit([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = PrismaticJointGetUpperLimitNative(jointId);
			return ret;
		}

		/// <summary>
		/// Set the prismatic joint limits<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_SetLimits")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrismaticJointSetLimitsNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "lower")] [NativeName(NativeNameType.Type, "float")] float lower, [NativeName(NativeNameType.Param, "upper")] [NativeName(NativeNameType.Type, "float")] float upper)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, float, void>)funcTable[303])(jointId, lower, upper);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, float, void>)funcTable[303])(jointId, lower, upper);
			#endif
		}

		/// <summary>
		/// Set the prismatic joint limits<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_SetLimits")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrismaticJointSetLimits([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "lower")] [NativeName(NativeNameType.Type, "float")] float lower, [NativeName(NativeNameType.Param, "upper")] [NativeName(NativeNameType.Type, "float")] float upper)
		{
			PrismaticJointSetLimitsNative(jointId, lower, upper);
		}

		/// <summary>
		/// Enable/disable a prismatic joint motor<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_EnableMotor")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrismaticJointEnableMotorNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableMotor")] [NativeName(NativeNameType.Type, "bool")] byte enableMotor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[304])(jointId, enableMotor);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[304])(jointId, enableMotor);
			#endif
		}

		/// <summary>
		/// Enable/disable a prismatic joint motor<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_EnableMotor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrismaticJointEnableMotor([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableMotor")] [NativeName(NativeNameType.Type, "bool")] bool enableMotor)
		{
			PrismaticJointEnableMotorNative(jointId, enableMotor ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Is the prismatic joint motor enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_IsMotorEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte PrismaticJointIsMotorEnabledNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[305])(jointId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[305])(jointId);
			#endif
		}

		/// <summary>
		/// Is the prismatic joint motor enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_IsMotorEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool PrismaticJointIsMotorEnabled([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			byte ret = PrismaticJointIsMotorEnabledNative(jointId);
			return ret != 0;
		}

		/// <summary>
		/// Set the prismatic joint motor speed, typically in meters per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_SetMotorSpeed")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrismaticJointSetMotorSpeedNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "motorSpeed")] [NativeName(NativeNameType.Type, "float")] float motorSpeed)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[306])(jointId, motorSpeed);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[306])(jointId, motorSpeed);
			#endif
		}

		/// <summary>
		/// Set the prismatic joint motor speed, typically in meters per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_SetMotorSpeed")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrismaticJointSetMotorSpeed([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "motorSpeed")] [NativeName(NativeNameType.Type, "float")] float motorSpeed)
		{
			PrismaticJointSetMotorSpeedNative(jointId, motorSpeed);
		}

		/// <summary>
		/// Get the prismatic joint motor speed, typically in meters per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetMotorSpeed")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float PrismaticJointGetMotorSpeedNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[307])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[307])(jointId);
			#endif
		}

		/// <summary>
		/// Get the prismatic joint motor speed, typically in meters per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetMotorSpeed")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float PrismaticJointGetMotorSpeed([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = PrismaticJointGetMotorSpeedNative(jointId);
			return ret;
		}

		/// <summary>
		/// Set the prismatic joint maximum motor force, typically in newtons<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_SetMaxMotorForce")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrismaticJointSetMaxMotorForceNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "force")] [NativeName(NativeNameType.Type, "float")] float force)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[308])(jointId, force);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[308])(jointId, force);
			#endif
		}

		/// <summary>
		/// Set the prismatic joint maximum motor force, typically in newtons<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_SetMaxMotorForce")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PrismaticJointSetMaxMotorForce([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "force")] [NativeName(NativeNameType.Type, "float")] float force)
		{
			PrismaticJointSetMaxMotorForceNative(jointId, force);
		}

		/// <summary>
		/// Get the prismatic joint maximum motor force, typically in newtons<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetMaxMotorForce")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float PrismaticJointGetMaxMotorForceNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[309])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[309])(jointId);
			#endif
		}

		/// <summary>
		/// Get the prismatic joint maximum motor force, typically in newtons<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetMaxMotorForce")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float PrismaticJointGetMaxMotorForce([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = PrismaticJointGetMaxMotorForceNative(jointId);
			return ret;
		}

		/// <summary>
		/// Get the prismatic joint current motor force, typically in newtons<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetMotorForce")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float PrismaticJointGetMotorForceNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[310])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[310])(jointId);
			#endif
		}

		/// <summary>
		/// Get the prismatic joint current motor force, typically in newtons<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2PrismaticJoint_GetMotorForce")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float PrismaticJointGetMotorForce([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = PrismaticJointGetMotorForceNative(jointId);
			return ret;
		}

		/// <summary>
		/// Create a revolute joint<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2CreateRevoluteJoint")]
		[return: NativeName(NativeNameType.Type, "b2JointId")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static B2JointId CreateRevoluteJointNative([NativeName(NativeNameType.Param, "worldId")] [NativeName(NativeNameType.Type, "b2WorldId")] B2WorldId worldId, [NativeName(NativeNameType.Param, "def")] [NativeName(NativeNameType.Type, "b2RevoluteJointDef const *")] B2RevoluteJointDef* def)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2WorldId, B2RevoluteJointDef*, B2JointId>)funcTable[311])(worldId, def);
			#else
			return (B2JointId)((delegate* unmanaged[Cdecl]<B2WorldId, nint, B2JointId>)funcTable[311])(worldId, (nint)def);
			#endif
		}

		/// <summary>
		/// Create a revolute joint<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2CreateRevoluteJoint")]
		[return: NativeName(NativeNameType.Type, "b2JointId")]
		public static B2JointId CreateRevoluteJoint([NativeName(NativeNameType.Param, "worldId")] [NativeName(NativeNameType.Type, "b2WorldId")] B2WorldId worldId, [NativeName(NativeNameType.Param, "def")] [NativeName(NativeNameType.Type, "b2RevoluteJointDef const *")] B2RevoluteJointDef* def)
		{
			B2JointId ret = CreateRevoluteJointNative(worldId, def);
			return ret;
		}

		/// <summary>
		/// Create a revolute joint<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2CreateRevoluteJoint")]
		[return: NativeName(NativeNameType.Type, "b2JointId")]
		public static B2JointId CreateRevoluteJoint([NativeName(NativeNameType.Param, "worldId")] [NativeName(NativeNameType.Type, "b2WorldId")] B2WorldId worldId, [NativeName(NativeNameType.Param, "def")] [NativeName(NativeNameType.Type, "b2RevoluteJointDef const *")] ref B2RevoluteJointDef def)
		{
			fixed (B2RevoluteJointDef* pdef = &def)
			{
				B2JointId ret = CreateRevoluteJointNative(worldId, (B2RevoluteJointDef*)pdef);
				return ret;
			}
		}

		/// <summary>
		/// Enable/disable the revolute joint spring<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_EnableSpring")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RevoluteJointEnableSpringNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableSpring")] [NativeName(NativeNameType.Type, "bool")] byte enableSpring)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[312])(jointId, enableSpring);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[312])(jointId, enableSpring);
			#endif
		}

		/// <summary>
		/// Enable/disable the revolute joint spring<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_EnableSpring")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RevoluteJointEnableSpring([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableSpring")] [NativeName(NativeNameType.Type, "bool")] bool enableSpring)
		{
			RevoluteJointEnableSpringNative(jointId, enableSpring ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Set the revolute joint spring stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_SetSpringHertz")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RevoluteJointSetSpringHertzNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "hertz")] [NativeName(NativeNameType.Type, "float")] float hertz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[313])(jointId, hertz);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[313])(jointId, hertz);
			#endif
		}

		/// <summary>
		/// Set the revolute joint spring stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_SetSpringHertz")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RevoluteJointSetSpringHertz([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "hertz")] [NativeName(NativeNameType.Type, "float")] float hertz)
		{
			RevoluteJointSetSpringHertzNative(jointId, hertz);
		}

		/// <summary>
		/// Get the revolute joint spring stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetSpringHertz")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float RevoluteJointGetSpringHertzNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[314])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[314])(jointId);
			#endif
		}

		/// <summary>
		/// Get the revolute joint spring stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetSpringHertz")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float RevoluteJointGetSpringHertz([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = RevoluteJointGetSpringHertzNative(jointId);
			return ret;
		}

		/// <summary>
		/// Set the revolute joint spring damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_SetSpringDampingRatio")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RevoluteJointSetSpringDampingRatioNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "dampingRatio")] [NativeName(NativeNameType.Type, "float")] float dampingRatio)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[315])(jointId, dampingRatio);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[315])(jointId, dampingRatio);
			#endif
		}

		/// <summary>
		/// Set the revolute joint spring damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_SetSpringDampingRatio")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RevoluteJointSetSpringDampingRatio([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "dampingRatio")] [NativeName(NativeNameType.Type, "float")] float dampingRatio)
		{
			RevoluteJointSetSpringDampingRatioNative(jointId, dampingRatio);
		}

		/// <summary>
		/// Get the revolute joint spring damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetSpringDampingRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float RevoluteJointGetSpringDampingRatioNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[316])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[316])(jointId);
			#endif
		}

		/// <summary>
		/// Get the revolute joint spring damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetSpringDampingRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float RevoluteJointGetSpringDampingRatio([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = RevoluteJointGetSpringDampingRatioNative(jointId);
			return ret;
		}

		/// <summary>
		/// Get the revolute joint current angle in radians relative to the reference angle<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetAngle")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float RevoluteJointGetAngleNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[317])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[317])(jointId);
			#endif
		}

		/// <summary>
		/// Get the revolute joint current angle in radians relative to the reference angle<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetAngle")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float RevoluteJointGetAngle([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = RevoluteJointGetAngleNative(jointId);
			return ret;
		}

		/// <summary>
		/// Enable/disable the revolute joint limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_EnableLimit")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RevoluteJointEnableLimitNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableLimit")] [NativeName(NativeNameType.Type, "bool")] byte enableLimit)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[318])(jointId, enableLimit);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[318])(jointId, enableLimit);
			#endif
		}

		/// <summary>
		/// Enable/disable the revolute joint limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_EnableLimit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RevoluteJointEnableLimit([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableLimit")] [NativeName(NativeNameType.Type, "bool")] bool enableLimit)
		{
			RevoluteJointEnableLimitNative(jointId, enableLimit ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Is the revolute joint limit enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_IsLimitEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte RevoluteJointIsLimitEnabledNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[319])(jointId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[319])(jointId);
			#endif
		}

		/// <summary>
		/// Is the revolute joint limit enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_IsLimitEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RevoluteJointIsLimitEnabled([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			byte ret = RevoluteJointIsLimitEnabledNative(jointId);
			return ret != 0;
		}

		/// <summary>
		/// Get the revolute joint lower limit in radians<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetLowerLimit")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float RevoluteJointGetLowerLimitNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[320])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[320])(jointId);
			#endif
		}

		/// <summary>
		/// Get the revolute joint lower limit in radians<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetLowerLimit")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float RevoluteJointGetLowerLimit([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = RevoluteJointGetLowerLimitNative(jointId);
			return ret;
		}

		/// <summary>
		/// Get the revolute joint upper limit in radians<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetUpperLimit")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float RevoluteJointGetUpperLimitNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[321])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[321])(jointId);
			#endif
		}

		/// <summary>
		/// Get the revolute joint upper limit in radians<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetUpperLimit")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float RevoluteJointGetUpperLimit([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = RevoluteJointGetUpperLimitNative(jointId);
			return ret;
		}

		/// <summary>
		/// Set the revolute joint limits in radians<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_SetLimits")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RevoluteJointSetLimitsNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "lower")] [NativeName(NativeNameType.Type, "float")] float lower, [NativeName(NativeNameType.Param, "upper")] [NativeName(NativeNameType.Type, "float")] float upper)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, float, void>)funcTable[322])(jointId, lower, upper);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, float, void>)funcTable[322])(jointId, lower, upper);
			#endif
		}

		/// <summary>
		/// Set the revolute joint limits in radians<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_SetLimits")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RevoluteJointSetLimits([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "lower")] [NativeName(NativeNameType.Type, "float")] float lower, [NativeName(NativeNameType.Param, "upper")] [NativeName(NativeNameType.Type, "float")] float upper)
		{
			RevoluteJointSetLimitsNative(jointId, lower, upper);
		}

		/// <summary>
		/// Enable/disable a revolute joint motor<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_EnableMotor")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RevoluteJointEnableMotorNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableMotor")] [NativeName(NativeNameType.Type, "bool")] byte enableMotor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[323])(jointId, enableMotor);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[323])(jointId, enableMotor);
			#endif
		}

		/// <summary>
		/// Enable/disable a revolute joint motor<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_EnableMotor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RevoluteJointEnableMotor([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableMotor")] [NativeName(NativeNameType.Type, "bool")] bool enableMotor)
		{
			RevoluteJointEnableMotorNative(jointId, enableMotor ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Is the revolute joint motor enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_IsMotorEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte RevoluteJointIsMotorEnabledNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[324])(jointId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[324])(jointId);
			#endif
		}

		/// <summary>
		/// Is the revolute joint motor enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_IsMotorEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RevoluteJointIsMotorEnabled([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			byte ret = RevoluteJointIsMotorEnabledNative(jointId);
			return ret != 0;
		}

		/// <summary>
		/// Set the revolute joint motor speed in radians per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_SetMotorSpeed")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RevoluteJointSetMotorSpeedNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "motorSpeed")] [NativeName(NativeNameType.Type, "float")] float motorSpeed)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[325])(jointId, motorSpeed);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[325])(jointId, motorSpeed);
			#endif
		}

		/// <summary>
		/// Set the revolute joint motor speed in radians per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_SetMotorSpeed")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RevoluteJointSetMotorSpeed([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "motorSpeed")] [NativeName(NativeNameType.Type, "float")] float motorSpeed)
		{
			RevoluteJointSetMotorSpeedNative(jointId, motorSpeed);
		}

		/// <summary>
		/// Get the revolute joint motor speed in radians per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetMotorSpeed")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float RevoluteJointGetMotorSpeedNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[326])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[326])(jointId);
			#endif
		}

		/// <summary>
		/// Get the revolute joint motor speed in radians per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetMotorSpeed")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float RevoluteJointGetMotorSpeed([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = RevoluteJointGetMotorSpeedNative(jointId);
			return ret;
		}

		/// <summary>
		/// Get the revolute joint current motor torque, typically in newton-meters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetMotorTorque")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float RevoluteJointGetMotorTorqueNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[327])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[327])(jointId);
			#endif
		}

		/// <summary>
		/// Get the revolute joint current motor torque, typically in newton-meters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetMotorTorque")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float RevoluteJointGetMotorTorque([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = RevoluteJointGetMotorTorqueNative(jointId);
			return ret;
		}

		/// <summary>
		/// Set the revolute joint maximum motor torque, typically in newton-meters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_SetMaxMotorTorque")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RevoluteJointSetMaxMotorTorqueNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "torque")] [NativeName(NativeNameType.Type, "float")] float torque)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[328])(jointId, torque);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[328])(jointId, torque);
			#endif
		}

		/// <summary>
		/// Set the revolute joint maximum motor torque, typically in newton-meters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_SetMaxMotorTorque")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RevoluteJointSetMaxMotorTorque([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "torque")] [NativeName(NativeNameType.Type, "float")] float torque)
		{
			RevoluteJointSetMaxMotorTorqueNative(jointId, torque);
		}

		/// <summary>
		/// Get the revolute joint maximum motor torque, typically in newton-meters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetMaxMotorTorque")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float RevoluteJointGetMaxMotorTorqueNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[329])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[329])(jointId);
			#endif
		}

		/// <summary>
		/// Get the revolute joint maximum motor torque, typically in newton-meters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2RevoluteJoint_GetMaxMotorTorque")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float RevoluteJointGetMaxMotorTorque([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = RevoluteJointGetMaxMotorTorqueNative(jointId);
			return ret;
		}

		/// <summary>
		/// Create a weld joint<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2CreateWeldJoint")]
		[return: NativeName(NativeNameType.Type, "b2JointId")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static B2JointId CreateWeldJointNative([NativeName(NativeNameType.Param, "worldId")] [NativeName(NativeNameType.Type, "b2WorldId")] B2WorldId worldId, [NativeName(NativeNameType.Param, "def")] [NativeName(NativeNameType.Type, "b2WeldJointDef const *")] B2WeldJointDef* def)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2WorldId, B2WeldJointDef*, B2JointId>)funcTable[330])(worldId, def);
			#else
			return (B2JointId)((delegate* unmanaged[Cdecl]<B2WorldId, nint, B2JointId>)funcTable[330])(worldId, (nint)def);
			#endif
		}

		/// <summary>
		/// Create a weld joint<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2CreateWeldJoint")]
		[return: NativeName(NativeNameType.Type, "b2JointId")]
		public static B2JointId CreateWeldJoint([NativeName(NativeNameType.Param, "worldId")] [NativeName(NativeNameType.Type, "b2WorldId")] B2WorldId worldId, [NativeName(NativeNameType.Param, "def")] [NativeName(NativeNameType.Type, "b2WeldJointDef const *")] B2WeldJointDef* def)
		{
			B2JointId ret = CreateWeldJointNative(worldId, def);
			return ret;
		}

		/// <summary>
		/// Create a weld joint<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2CreateWeldJoint")]
		[return: NativeName(NativeNameType.Type, "b2JointId")]
		public static B2JointId CreateWeldJoint([NativeName(NativeNameType.Param, "worldId")] [NativeName(NativeNameType.Type, "b2WorldId")] B2WorldId worldId, [NativeName(NativeNameType.Param, "def")] [NativeName(NativeNameType.Type, "b2WeldJointDef const *")] ref B2WeldJointDef def)
		{
			fixed (B2WeldJointDef* pdef = &def)
			{
				B2JointId ret = CreateWeldJointNative(worldId, (B2WeldJointDef*)pdef);
				return ret;
			}
		}

		/// <summary>
		/// Set the weld joint linear stiffness in Hertz. 0 is rigid.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_SetLinearHertz")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeldJointSetLinearHertzNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "hertz")] [NativeName(NativeNameType.Type, "float")] float hertz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[331])(jointId, hertz);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[331])(jointId, hertz);
			#endif
		}

		/// <summary>
		/// Set the weld joint linear stiffness in Hertz. 0 is rigid.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_SetLinearHertz")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WeldJointSetLinearHertz([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "hertz")] [NativeName(NativeNameType.Type, "float")] float hertz)
		{
			WeldJointSetLinearHertzNative(jointId, hertz);
		}

		/// <summary>
		/// Get the weld joint linear stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_GetLinearHertz")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float WeldJointGetLinearHertzNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[332])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[332])(jointId);
			#endif
		}

		/// <summary>
		/// Get the weld joint linear stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_GetLinearHertz")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float WeldJointGetLinearHertz([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = WeldJointGetLinearHertzNative(jointId);
			return ret;
		}

		/// <summary>
		/// Set the weld joint linear damping ratio (non-dimensional)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_SetLinearDampingRatio")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeldJointSetLinearDampingRatioNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "dampingRatio")] [NativeName(NativeNameType.Type, "float")] float dampingRatio)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[333])(jointId, dampingRatio);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[333])(jointId, dampingRatio);
			#endif
		}

		/// <summary>
		/// Set the weld joint linear damping ratio (non-dimensional)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_SetLinearDampingRatio")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WeldJointSetLinearDampingRatio([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "dampingRatio")] [NativeName(NativeNameType.Type, "float")] float dampingRatio)
		{
			WeldJointSetLinearDampingRatioNative(jointId, dampingRatio);
		}

		/// <summary>
		/// Get the weld joint linear damping ratio (non-dimensional)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_GetLinearDampingRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float WeldJointGetLinearDampingRatioNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[334])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[334])(jointId);
			#endif
		}

		/// <summary>
		/// Get the weld joint linear damping ratio (non-dimensional)<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_GetLinearDampingRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float WeldJointGetLinearDampingRatio([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = WeldJointGetLinearDampingRatioNative(jointId);
			return ret;
		}

		/// <summary>
		/// Set the weld joint angular stiffness in Hertz. 0 is rigid.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_SetAngularHertz")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeldJointSetAngularHertzNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "hertz")] [NativeName(NativeNameType.Type, "float")] float hertz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[335])(jointId, hertz);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[335])(jointId, hertz);
			#endif
		}

		/// <summary>
		/// Set the weld joint angular stiffness in Hertz. 0 is rigid.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_SetAngularHertz")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WeldJointSetAngularHertz([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "hertz")] [NativeName(NativeNameType.Type, "float")] float hertz)
		{
			WeldJointSetAngularHertzNative(jointId, hertz);
		}

		/// <summary>
		/// Get the weld joint angular stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_GetAngularHertz")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float WeldJointGetAngularHertzNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[336])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[336])(jointId);
			#endif
		}

		/// <summary>
		/// Get the weld joint angular stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_GetAngularHertz")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float WeldJointGetAngularHertz([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = WeldJointGetAngularHertzNative(jointId);
			return ret;
		}

		/// <summary>
		/// Set weld joint angular damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_SetAngularDampingRatio")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeldJointSetAngularDampingRatioNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "dampingRatio")] [NativeName(NativeNameType.Type, "float")] float dampingRatio)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[337])(jointId, dampingRatio);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[337])(jointId, dampingRatio);
			#endif
		}

		/// <summary>
		/// Set weld joint angular damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_SetAngularDampingRatio")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WeldJointSetAngularDampingRatio([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "dampingRatio")] [NativeName(NativeNameType.Type, "float")] float dampingRatio)
		{
			WeldJointSetAngularDampingRatioNative(jointId, dampingRatio);
		}

		/// <summary>
		/// Get the weld joint angular damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_GetAngularDampingRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float WeldJointGetAngularDampingRatioNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[338])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[338])(jointId);
			#endif
		}

		/// <summary>
		/// Get the weld joint angular damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WeldJoint_GetAngularDampingRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float WeldJointGetAngularDampingRatio([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = WeldJointGetAngularDampingRatioNative(jointId);
			return ret;
		}

		/// <summary>
		/// Create a wheel joint<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2CreateWheelJoint")]
		[return: NativeName(NativeNameType.Type, "b2JointId")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static B2JointId CreateWheelJointNative([NativeName(NativeNameType.Param, "worldId")] [NativeName(NativeNameType.Type, "b2WorldId")] B2WorldId worldId, [NativeName(NativeNameType.Param, "def")] [NativeName(NativeNameType.Type, "b2WheelJointDef const *")] B2WheelJointDef* def)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2WorldId, B2WheelJointDef*, B2JointId>)funcTable[339])(worldId, def);
			#else
			return (B2JointId)((delegate* unmanaged[Cdecl]<B2WorldId, nint, B2JointId>)funcTable[339])(worldId, (nint)def);
			#endif
		}

		/// <summary>
		/// Create a wheel joint<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2CreateWheelJoint")]
		[return: NativeName(NativeNameType.Type, "b2JointId")]
		public static B2JointId CreateWheelJoint([NativeName(NativeNameType.Param, "worldId")] [NativeName(NativeNameType.Type, "b2WorldId")] B2WorldId worldId, [NativeName(NativeNameType.Param, "def")] [NativeName(NativeNameType.Type, "b2WheelJointDef const *")] B2WheelJointDef* def)
		{
			B2JointId ret = CreateWheelJointNative(worldId, def);
			return ret;
		}

		/// <summary>
		/// Create a wheel joint<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2CreateWheelJoint")]
		[return: NativeName(NativeNameType.Type, "b2JointId")]
		public static B2JointId CreateWheelJoint([NativeName(NativeNameType.Param, "worldId")] [NativeName(NativeNameType.Type, "b2WorldId")] B2WorldId worldId, [NativeName(NativeNameType.Param, "def")] [NativeName(NativeNameType.Type, "b2WheelJointDef const *")] ref B2WheelJointDef def)
		{
			fixed (B2WheelJointDef* pdef = &def)
			{
				B2JointId ret = CreateWheelJointNative(worldId, (B2WheelJointDef*)pdef);
				return ret;
			}
		}

		/// <summary>
		/// Enable/disable the wheel joint spring<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_EnableSpring")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WheelJointEnableSpringNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableSpring")] [NativeName(NativeNameType.Type, "bool")] byte enableSpring)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[340])(jointId, enableSpring);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[340])(jointId, enableSpring);
			#endif
		}

		/// <summary>
		/// Enable/disable the wheel joint spring<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_EnableSpring")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WheelJointEnableSpring([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableSpring")] [NativeName(NativeNameType.Type, "bool")] bool enableSpring)
		{
			WheelJointEnableSpringNative(jointId, enableSpring ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Is the wheel joint spring enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_IsSpringEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte WheelJointIsSpringEnabledNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[341])(jointId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[341])(jointId);
			#endif
		}

		/// <summary>
		/// Is the wheel joint spring enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_IsSpringEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool WheelJointIsSpringEnabled([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			byte ret = WheelJointIsSpringEnabledNative(jointId);
			return ret != 0;
		}

		/// <summary>
		/// Set the wheel joint stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_SetSpringHertz")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WheelJointSetSpringHertzNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "hertz")] [NativeName(NativeNameType.Type, "float")] float hertz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[342])(jointId, hertz);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[342])(jointId, hertz);
			#endif
		}

		/// <summary>
		/// Set the wheel joint stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_SetSpringHertz")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WheelJointSetSpringHertz([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "hertz")] [NativeName(NativeNameType.Type, "float")] float hertz)
		{
			WheelJointSetSpringHertzNative(jointId, hertz);
		}

		/// <summary>
		/// Get the wheel joint stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetSpringHertz")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float WheelJointGetSpringHertzNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[343])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[343])(jointId);
			#endif
		}

		/// <summary>
		/// Get the wheel joint stiffness in Hertz<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetSpringHertz")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float WheelJointGetSpringHertz([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = WheelJointGetSpringHertzNative(jointId);
			return ret;
		}

		/// <summary>
		/// Set the wheel joint damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_SetSpringDampingRatio")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WheelJointSetSpringDampingRatioNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "dampingRatio")] [NativeName(NativeNameType.Type, "float")] float dampingRatio)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[344])(jointId, dampingRatio);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[344])(jointId, dampingRatio);
			#endif
		}

		/// <summary>
		/// Set the wheel joint damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_SetSpringDampingRatio")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WheelJointSetSpringDampingRatio([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "dampingRatio")] [NativeName(NativeNameType.Type, "float")] float dampingRatio)
		{
			WheelJointSetSpringDampingRatioNative(jointId, dampingRatio);
		}

		/// <summary>
		/// Get the wheel joint damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetSpringDampingRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float WheelJointGetSpringDampingRatioNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[345])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[345])(jointId);
			#endif
		}

		/// <summary>
		/// Get the wheel joint damping ratio, non-dimensional<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetSpringDampingRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float WheelJointGetSpringDampingRatio([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = WheelJointGetSpringDampingRatioNative(jointId);
			return ret;
		}

		/// <summary>
		/// Enable/disable the wheel joint limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_EnableLimit")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WheelJointEnableLimitNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableLimit")] [NativeName(NativeNameType.Type, "bool")] byte enableLimit)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[346])(jointId, enableLimit);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[346])(jointId, enableLimit);
			#endif
		}

		/// <summary>
		/// Enable/disable the wheel joint limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_EnableLimit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WheelJointEnableLimit([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableLimit")] [NativeName(NativeNameType.Type, "bool")] bool enableLimit)
		{
			WheelJointEnableLimitNative(jointId, enableLimit ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Is the wheel joint limit enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_IsLimitEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte WheelJointIsLimitEnabledNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[347])(jointId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[347])(jointId);
			#endif
		}

		/// <summary>
		/// Is the wheel joint limit enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_IsLimitEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool WheelJointIsLimitEnabled([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			byte ret = WheelJointIsLimitEnabledNative(jointId);
			return ret != 0;
		}

		/// <summary>
		/// Get the wheel joint lower limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetLowerLimit")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float WheelJointGetLowerLimitNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[348])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[348])(jointId);
			#endif
		}

		/// <summary>
		/// Get the wheel joint lower limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetLowerLimit")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float WheelJointGetLowerLimit([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = WheelJointGetLowerLimitNative(jointId);
			return ret;
		}

		/// <summary>
		/// Get the wheel joint upper limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetUpperLimit")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float WheelJointGetUpperLimitNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[349])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[349])(jointId);
			#endif
		}

		/// <summary>
		/// Get the wheel joint upper limit<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetUpperLimit")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float WheelJointGetUpperLimit([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = WheelJointGetUpperLimitNative(jointId);
			return ret;
		}

		/// <summary>
		/// Set the wheel joint limits<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_SetLimits")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WheelJointSetLimitsNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "lower")] [NativeName(NativeNameType.Type, "float")] float lower, [NativeName(NativeNameType.Param, "upper")] [NativeName(NativeNameType.Type, "float")] float upper)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, float, void>)funcTable[350])(jointId, lower, upper);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, float, void>)funcTable[350])(jointId, lower, upper);
			#endif
		}

		/// <summary>
		/// Set the wheel joint limits<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_SetLimits")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WheelJointSetLimits([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "lower")] [NativeName(NativeNameType.Type, "float")] float lower, [NativeName(NativeNameType.Param, "upper")] [NativeName(NativeNameType.Type, "float")] float upper)
		{
			WheelJointSetLimitsNative(jointId, lower, upper);
		}

		/// <summary>
		/// Enable/disable the wheel joint motor<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_EnableMotor")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WheelJointEnableMotorNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableMotor")] [NativeName(NativeNameType.Type, "bool")] byte enableMotor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[351])(jointId, enableMotor);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, byte, void>)funcTable[351])(jointId, enableMotor);
			#endif
		}

		/// <summary>
		/// Enable/disable the wheel joint motor<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_EnableMotor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WheelJointEnableMotor([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "enableMotor")] [NativeName(NativeNameType.Type, "bool")] bool enableMotor)
		{
			WheelJointEnableMotorNative(jointId, enableMotor ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Is the wheel joint motor enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_IsMotorEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte WheelJointIsMotorEnabledNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[352])(jointId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<B2JointId, byte>)funcTable[352])(jointId);
			#endif
		}

		/// <summary>
		/// Is the wheel joint motor enabled?<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_IsMotorEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool WheelJointIsMotorEnabled([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			byte ret = WheelJointIsMotorEnabledNative(jointId);
			return ret != 0;
		}

		/// <summary>
		/// Set the wheel joint motor speed in radians per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_SetMotorSpeed")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WheelJointSetMotorSpeedNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "motorSpeed")] [NativeName(NativeNameType.Type, "float")] float motorSpeed)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[353])(jointId, motorSpeed);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[353])(jointId, motorSpeed);
			#endif
		}

		/// <summary>
		/// Set the wheel joint motor speed in radians per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_SetMotorSpeed")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WheelJointSetMotorSpeed([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "motorSpeed")] [NativeName(NativeNameType.Type, "float")] float motorSpeed)
		{
			WheelJointSetMotorSpeedNative(jointId, motorSpeed);
		}

		/// <summary>
		/// Get the wheel joint motor speed in radians per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetMotorSpeed")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float WheelJointGetMotorSpeedNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[354])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[354])(jointId);
			#endif
		}

		/// <summary>
		/// Get the wheel joint motor speed in radians per second<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetMotorSpeed")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float WheelJointGetMotorSpeed([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = WheelJointGetMotorSpeedNative(jointId);
			return ret;
		}

		/// <summary>
		/// Set the wheel joint maximum motor torque, typically in newton-meters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_SetMaxMotorTorque")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WheelJointSetMaxMotorTorqueNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "torque")] [NativeName(NativeNameType.Type, "float")] float torque)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[355])(jointId, torque);
			#else
			((delegate* unmanaged[Cdecl]<B2JointId, float, void>)funcTable[355])(jointId, torque);
			#endif
		}

		/// <summary>
		/// Set the wheel joint maximum motor torque, typically in newton-meters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_SetMaxMotorTorque")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void WheelJointSetMaxMotorTorque([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId, [NativeName(NativeNameType.Param, "torque")] [NativeName(NativeNameType.Type, "float")] float torque)
		{
			WheelJointSetMaxMotorTorqueNative(jointId, torque);
		}

		/// <summary>
		/// Get the wheel joint maximum motor torque, typically in newton-meters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetMaxMotorTorque")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float WheelJointGetMaxMotorTorqueNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[356])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[356])(jointId);
			#endif
		}

		/// <summary>
		/// Get the wheel joint maximum motor torque, typically in newton-meters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetMaxMotorTorque")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float WheelJointGetMaxMotorTorque([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = WheelJointGetMaxMotorTorqueNative(jointId);
			return ret;
		}

		/// <summary>
		/// Get the wheel joint current motor torque, typically in newton-meters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetMotorTorque")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float WheelJointGetMotorTorqueNative([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[357])(jointId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<B2JointId, float>)funcTable[357])(jointId);
			#endif
		}

		/// <summary>
		/// Get the wheel joint current motor torque, typically in newton-meters<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "b2WheelJoint_GetMotorTorque")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float WheelJointGetMotorTorque([NativeName(NativeNameType.Param, "jointId")] [NativeName(NativeNameType.Type, "b2JointId")] B2JointId jointId)
		{
			float ret = WheelJointGetMotorTorqueNative(jointId);
			return ret;
		}

	}
}
